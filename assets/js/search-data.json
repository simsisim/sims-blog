{
  
    
        "post0": {
            "title": "Write Images to TFRecords Format",
            "content": "import numpy as np import tensorflow as tf import glob . 1.TFRecord format . doesn&#39;t know anything about image formats | can save both dense arrays or image formats | in contrast to imread and imsave TF decouples reading/decoding and encoding/writting | . Steps . Encode the features as types compatible with tf.train.Example | This stores the raw image string feature, as well as the height, width, depth, and arbitrary label feature. | . 2. Creating a tf.train.Example message . Suppose you want to create a tf.train.Example message from existing data. In practice, the dataset may come from anywhere, but the procedure of creating the tf.train.Example message from a single observation will be the same: . Within each observation, each value needs to be converted to a tf.train.Feature containing one of the 3 compatible types, using one of the functions above . | You create a map (dictionary) from the feature name string to the encoded feature value produced in #1 . | The map produced in step 2 is converted to a Features message. . | . # with tf.train.Example. def _create_bytes_feature(value): &quot;&quot;&quot;Returns a bytes_list from a string / byte.&quot;&quot;&quot; if isinstance(value, type(tf.constant(0))): value = value.numpy() # BytesList won&#39;t unpack a string from an EagerTensor. return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value])) def _create_float_feature(value): &quot;&quot;&quot;Returns a float_list from a float / double.&quot;&quot;&quot; return tf.train.Feature(float_list=tf.train.FloatList(value=[value])) def _create_int64_feature(value): &quot;&quot;&quot;Returns an int64_list from a bool / enum / int / uint.&quot;&quot;&quot; return tf.train.Feature(int64_list=tf.train.Int64List(value=[value])) . #freedom02 = tf.keras.preprocessing.image.load_img(&quot;images/freedom.png&quot;) #freedom01_arr = tf.keras.preprocessing.image.img_to_array(freedom01)#image to array #freedom02_arr = tf.keras.preprocessing.image.img_to_array(freedom02) #freedom01_name = tf.keras.preprocessing.image.load_img(&quot;images/freedom.png&quot;)#load &amp; decode image #freedom02_name = tf.keras.preprocessing.image.load_img(&quot;images/freedom.png&quot;) #print(freedom01_arr.shape) . 3. Write a list of images to TFRecords . record_file = &quot;images/TFRecords/my-tfR.tfrecords&quot; #load all files in folder list_files = glob.glob(&quot;images/TFRecords/*.png&quot;) with tf.io.TFRecordWriter(record_file) as writer: for _, filename in enumerate(list_files): image_string = open(filename, &#39;rb&#39;).read()#reads each image in list in bytes format feature = {&quot;raw_image&quot;: _create_bytes_feature(image_string)} #create a feature named values which contains the whole bytes array tf_example = tf.train.Example(features=tf.train.Features(feature=feature))#creates an example writer.write(tf_example.SerializeToString()) #image_string . 4. Write a list of images/labels to TFRecords . record_file = &quot;images/TFRecords/my-tfR.tfrecords&quot; list_files = glob.glob(&quot;images/TFRecords/*.png&quot;) labels = [0, 1] images_labels = { list_files[0] : labels[0], list_files[1] : labels[1], } with tf.io.TFRecordWriter(record_file) as writer: for filename, label in images_labels.items(): image_string = open(filename, &#39;rb&#39;).read()#reads each image in list in bytes format feature = {&quot;raw_image&quot;: _create_bytes_feature(image_string),#create a feature named values which contains the whole bytes array &quot;label&quot;: _create_int64_feature(label) } #create a feature named label which contains 0 or 1 tf_example = tf.train.Example(features = tf.train.Features(feature=feature))#creates an example writer.write(tf_example.SerializeToString()) . 5. Write a list of images with additional information to TFRecords . To be able to read the TFRecord files additional information such as original size/shape of image must be retained. . record_file = &quot;images/TFRecords/my-tfR.tfrecords&quot; #load all files in folder list_files = glob.glob(&quot;images/TFRecords/*.png&quot;) with tf.io.TFRecordWriter(record_file) as writer: for _, filename in enumerate(list_files): image_string = open(filename, &#39;rb&#39;).read()#reads each image as byte string #image_shape = tf.image.decode_png(image_string).shape # size of image to be retained image_shape = (600, 400, 3) feature = {&quot;raw_image&quot;: _create_bytes_feature(image_string),#create a feature named values which contains the whole bytes array &#39;height&#39;: _create_int64_feature(image_shape[0]), &#39;width&#39; : _create_int64_feature(image_shape[1]), &quot;no_c&quot; : _create_int64_feature(image_shape[2]), }# tf_example = tf.train.Example(features=tf.train.Features(feature=feature))#creates an example writer.write(tf_example.SerializeToString()) . record_file = &quot;images/TFRecords/my-tfR-JPEG.tfrecords&quot; #load all files in folder list_files = glob.glob(&quot;images/TFRecords/*.jpg&quot;) with tf.io.TFRecordWriter(record_file) as writer: for _, filename in enumerate(list_files): image_string = open(filename, &#39;rb&#39;).read()#reads each image as byte string #image_shape = tf.image.decode_png(image_string).shape # size of image to be retained feature = {&quot;raw_image&quot;: _create_bytes_feature(image_string),#create a feature named values which contains the whole bytes array &#39;height&#39;: _create_int64_feature(image_shape[0]), &#39;width&#39; : _create_int64_feature(image_shape[1]), &quot;no_c&quot; : _create_int64_feature(image_shape[2]), }# tf_example = tf.train.Example(features=tf.train.Features(feature=feature))#creates an example writer.write(tf_example.SerializeToString()) . References: . https://planspace.org/20170403-images_and_tfrecords/ . https://gist.github.com/MathiasGruber/8debc802464a48efc8c22a2064e0bf78 . https://www.tensorflow.org/tutorials/load_data/tfrecord . https://machinelearningmastery.com/how-to-load-convert-and-save-images-with-the-keras-api/ .",
            "url": "https://simsisim.github.io/sims-blog/tfrecords/tensorflow/image%20processing/2020/12/21/Write_TFRecords.html",
            "relUrl": "/tfrecords/tensorflow/image%20processing/2020/12/21/Write_TFRecords.html",
            "date": " • Dec 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Image Processing Dense Array, JPEG, PNG",
            "content": "Images are dense matrixes, and have a certain numbers of rows and columns. They can have 1 (grey) or 3 (RGB) or 4 (RGB + alpha-transparency) channels. . The dimension of the image matrix is ( height, width, channels). . import numpy as np import matplotlib.pyplot as plt import matplotlib.image as mpimg from PIL import Image import cv2 from sys import getsizeof import tensorflow as tf . 1. Load image files (.jpg, .png, .bmp, .tif) . using PIL | using matplotlib: reads image as RGB | using cv2 : reads image as BRG | . imread: reads a file from disk and decodes it | imsave: encodes a image and writes it to a file on disk | . #image = Image.open(&quot;images/freedom.png&quot;) #plt.show(image) . Load image using Matplotlib . The Matplotlib image tutorial recommends using matplotlib.image.imread to read image formats from disk. This function will automatically change image array values to floats between zero and one, and it doesn&#39;t give any other options about how to read the image. . imshow works on 0-1 floats &amp; 0-255 uint8 values | It doesn&#39;t work on int! | . image = mpimg.imread(&quot;images/freedom.png&quot;) plt.imshow(image) plt.colorbar() . &lt;matplotlib.colorbar.Colorbar at 0x7f8bd8cfd5d0&gt; . print(image.dtype) freedom_array_uint8 = (image*255).astype(np.uint8) #convert to 0-255 values . float32 . Load image using OpenCV . image = cv2.imread(&quot;images/freedom.png&quot;) #OpenCV uses BGR as its default colour order for images, matplotlib uses RGB RGB_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)# cv2.cvtColor() method is used to convert an image from one color space to another plt.imshow(RGB_image) plt.colorbar() . &lt;matplotlib.colorbar.Colorbar at 0x7f8bd8beb3d0&gt; . For this image, the matrix will have 600 x 400 x 3 = 720,000 values. Each value is an unsigned 8-bit integer, in total 720,000 bytes. . Using unsigned 8-bit integers (256 possible values) for each value in the image array is enough for displaying images to humans. But when working with image data, it isn&#39;t uncommon to switch to 32-bit floats, for example. This increases tremendously the size of the data. . By loading the image files we can save them as arrays. Typical array operations can be performed on them. . print (RGB_image.shape, RGB_image.dtype) . (600, 400, 3) uint8 . Load image using keras.preprocessing.image . load_img(image): loads and decodes image | img_to_array(image) | . image_keras = tf.keras.preprocessing.image.load_img(&quot;images/freedom.png&quot;) # loads and decodes image print(type(image_keras)) print(image_keras.format) print(image_keras.mode) print(image_keras.size) #image_keras.show() . &lt;class &#39;PIL.Image.Image&#39;&gt; None RGB (400, 600) . 2. Image Processing . Dense Array . One way to store complete raster image data is by serializing a NumPy array to disk. . image04npy = 720,128 bytes . The file image04npy has 128 more bytes than the one required to store the array values. Those extra bytes specify things like the array shape/dimensions. . np.save(&quot;images/freedom.npy&quot;, RGB_image) freedomnpy = np.load(&#39;images/freedom.npy&#39;) print(&quot;Size of array:&quot;, freedomnpy.nbytes) print(&quot;Size of disk:&quot;, getsizeof(freedomnpy)) . Size of array: 720000 Size of disk: 720128 . Storing one pixels takes several bytes.There are two main options for saving images: whether to lose some information while saving, or not. . JPG format . JPEG is lossy by deflaut . | When saving an image as $*$.JPEG and read from it again, it is not necessary to get back the same values . | The &quot;image04_jpg.jpg&quot; has 6.3 kB, less than the 7 % of $*$.npy file that generated it . | cv2.IMWRITE_JPEG_QUALITY is between (0, 100), and allows to save losseless . | . cv2.imwrite(&quot;images/freedom_jpg.jpg&quot;, freedomnpy, [cv2.IMWRITE_JPEG_QUALITY, 0]) freedom_jpg = cv2.imread(&quot;images/freedom_jpg.jpg&quot;) plt.imshow(freedom_jpg) . &lt;matplotlib.image.AxesImage at 0x7f8bd8b86c90&gt; . PNG format . PNG is lossless . | When saving an image as $*$.PNG and read from it again one gets the same value backs . | cv2.IMWRITE_PNG_COMPRESSION is between (0, 1): bigger file, slower compression . | freedom_png.png = 721.8 kB, close to freedomnpy . | . cv2.imwrite(&quot;images/freedom_png.png&quot;, freedomnpy, [cv2.IMWRITE_PNG_COMPRESSION, 0]) freedom_png = cv2.imread(&quot;images/freedom_png.png&quot;) plt.imshow(freedom_png) . &lt;matplotlib.image.AxesImage at 0x7f8bd8b049d0&gt; . References: . https://planspace.org/20170403-images_and_tfrecords/ . https://subscription.packtpub.com/book/application_development/9781788474443/1/ch01lvl1sec14/saving-images-using-lossy-and-lossless-compression . https://www.tensorflow.org/tutorials/load_data/tfrecord . https://machinelearningmastery.com/how-to-load-convert-and-save-images-with-the-keras-api/ .",
            "url": "https://simsisim.github.io/sims-blog/image%20processing/computer%20vision/2020/12/21/Image_Processing.html",
            "relUrl": "/image%20processing/computer%20vision/2020/12/21/Image_Processing.html",
            "date": " • Dec 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "A list of commands for Git on Github",
            "content": "1. Open Terminal . 2. Change the current working directory to your local repository . 3. Checking the status of the repository (go inside project folder) . git status . 4. Staging files (add files to the staging area) . touch test.py git add test.py #git add test01.py test02.py test03.py git add . # adds all files in the directory . git reset HEAD test.py #unstage a file that was commited . 5. Making commits . git commit -m &quot;Commit message&quot; # commit a file git log # list of all comits git checkout &lt;commit-hash&gt; # go back to a previous commited state git checkout master # go back to last commit . 6. Pushing Changes to Repository . git push origin . 7.Remove files . git rm test.py git commit -m &quot;remove test.py&quot; git rm -r my_folder #delete folder . 8. Add and Commit Multiple Files at Once . git add . git commit -m &quot;m: my mesage flag&quot; . git commit -a -m &quot;m: my mesage flag&quot; . 10. Git / Clone a new repository from Github to local . mkdir new-folder . cd new-folder . git init . git clone https://github.com/new-folder.git . 11. References . https: //www.notion.so/Introduction-to-Git-ac396a0697704709a12b6a0e545db049 .",
            "url": "https://simsisim.github.io/sims-blog/github/commands/2020/12/20/Intro_to_Git.html",
            "relUrl": "/github/commands/2020/12/20/Intro_to_Git.html",
            "date": " • Dec 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Basic of Computer Vision",
            "content": "print(&quot;This is a test&quot;) . This is a test .",
            "url": "https://simsisim.github.io/sims-blog/computer%20vision/image%20processing/coursera/2020/12/20/Basic_of_Computer_Vision.html",
            "relUrl": "/computer%20vision/image%20processing/coursera/2020/12/20/Basic_of_Computer_Vision.html",
            "date": " • Dec 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://simsisim.github.io/sims-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://simsisim.github.io/sims-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://simsisim.github.io/sims-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://simsisim.github.io/sims-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}